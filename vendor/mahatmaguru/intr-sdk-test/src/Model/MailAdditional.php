<?php
/**
 * MailAdditional
 *
 * PHP version 5
 *
 * @category Class
 * @package  Introvert
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * INTROVERT API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Introvert\Model;

use \ArrayAccess;

/**
 * MailAdditional Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Introvert
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class MailAdditional implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'MailAdditional';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'entity_id' => 'int',
        'entity_type' => 'string',
        'login' => 'string',
        'crm_user_id' => 'int',
        'service' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'entity_id' => 'entity_id',
        'entity_type' => 'entity_type',
        'login' => 'login',
        'crm_user_id' => 'crm_user_id',
        'service' => 'service'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'entity_id' => 'setEntityId',
        'entity_type' => 'setEntityType',
        'login' => 'setLogin',
        'crm_user_id' => 'setCrmUserId',
        'service' => 'setService'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'entity_id' => 'getEntityId',
        'entity_type' => 'getEntityType',
        'login' => 'getLogin',
        'crm_user_id' => 'getCrmUserId',
        'service' => 'getService'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const SERVICE_ = '';
    const SERVICE_AMOCRM = 'amocrm';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getServiceAllowableValues()
    {
        return [
            self::SERVICE_,
            self::SERVICE_AMOCRM,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['entity_id'] = isset($data['entity_id']) ? $data['entity_id'] : null;
        $this->container['entity_type'] = isset($data['entity_type']) ? $data['entity_type'] : 'lead';
        $this->container['login'] = isset($data['login']) ? $data['login'] : null;
        $this->container['crm_user_id'] = isset($data['crm_user_id']) ? $data['crm_user_id'] : null;
        $this->container['service'] = isset($data['service']) ? $data['service'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        $allowed_values = ["", "amocrm"];
        if (!in_array($this->container['service'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'service', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = ["", "amocrm"];
        if (!in_array($this->container['service'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets entity_id
     * @return int
     */
    public function getEntityId()
    {
        return $this->container['entity_id'];
    }

    /**
     * Sets entity_id
     * @param int $entity_id id сущности, к которой будет прикреплено письмо
     * @return $this
     */
    public function setEntityId($entity_id)
    {
        $this->container['entity_id'] = $entity_id;

        return $this;
    }

    /**
     * Gets entity_type
     * @return string
     */
    public function getEntityType()
    {
        return $this->container['entity_type'];
    }

    /**
     * Sets entity_type
     * @param string $entity_type тип сущности, к которой будет прикреплено письмо, в данный момент только lead, по умолчанию lead
     * @return $this
     */
    public function setEntityType($entity_type)
    {
        $this->container['entity_type'] = $entity_type;

        return $this;
    }

    /**
     * Gets login
     * @return string
     */
    public function getLogin()
    {
        return $this->container['login'];
    }

    /**
     * Sets login
     * @param string $login логин отпарвителя
     * @return $this
     */
    public function setLogin($login)
    {
        $this->container['login'] = $login;

        return $this;
    }

    /**
     * Gets crm_user_id
     * @return int
     */
    public function getCrmUserId()
    {
        return $this->container['crm_user_id'];
    }

    /**
     * Sets crm_user_id
     * @param int $crm_user_id id отправителя
     * @return $this
     */
    public function setCrmUserId($crm_user_id)
    {
        $this->container['crm_user_id'] = $crm_user_id;

        return $this;
    }

    /**
     * Gets service
     * @return string
     */
    public function getService()
    {
        return $this->container['service'];
    }

    /**
     * Sets service
     * @param string $service Почтовый сервис
     * @return $this
     */
    public function setService($service)
    {
        $allowed_values = array('', 'amocrm');
        if (!is_null($service) && (!in_array($service, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'service', must be one of '', 'amocrm'");
        }
        $this->container['service'] = $service;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Introvert\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Introvert\ObjectSerializer::sanitizeForSerialization($this));
    }
}



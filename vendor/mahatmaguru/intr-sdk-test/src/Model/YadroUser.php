<?php
/**
 * YadroUser
 *
 * PHP version 5
 *
 * @category Class
 * @package  Introvert
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * INTROVERT API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Introvert\Model;

use \ArrayAccess;

/**
 * YadroUser Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Introvert
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class YadroUser implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'YadroUser';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'uid' => 'int',
        'name' => 'string',
        'email' => 'string',
        'phone' => 'int',
        'amoid' => 'int',
        'enabled' => 'int',
        'sender_name' => 'string',
        'signature' => 'string',
        'pbx_number' => 'int',
        'reserve_number' => 'int',
        'for_new_clients_number' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'uid' => 'uid',
        'name' => 'name',
        'email' => 'email',
        'phone' => 'phone',
        'amoid' => 'amoid',
        'enabled' => 'enabled',
        'sender_name' => 'sender_name',
        'signature' => 'signature',
        'pbx_number' => 'pbx_number',
        'reserve_number' => 'reserve_number',
        'for_new_clients_number' => 'for_new_clients_number'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'uid' => 'setUid',
        'name' => 'setName',
        'email' => 'setEmail',
        'phone' => 'setPhone',
        'amoid' => 'setAmoid',
        'enabled' => 'setEnabled',
        'sender_name' => 'setSenderName',
        'signature' => 'setSignature',
        'pbx_number' => 'setPbxNumber',
        'reserve_number' => 'setReserveNumber',
        'for_new_clients_number' => 'setForNewClientsNumber'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'uid' => 'getUid',
        'name' => 'getName',
        'email' => 'getEmail',
        'phone' => 'getPhone',
        'amoid' => 'getAmoid',
        'enabled' => 'getEnabled',
        'sender_name' => 'getSenderName',
        'signature' => 'getSignature',
        'pbx_number' => 'getPbxNumber',
        'reserve_number' => 'getReserveNumber',
        'for_new_clients_number' => 'getForNewClientsNumber'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['uid'] = isset($data['uid']) ? $data['uid'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['amoid'] = isset($data['amoid']) ? $data['amoid'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['sender_name'] = isset($data['sender_name']) ? $data['sender_name'] : null;
        $this->container['signature'] = isset($data['signature']) ? $data['signature'] : null;
        $this->container['pbx_number'] = isset($data['pbx_number']) ? $data['pbx_number'] : null;
        $this->container['reserve_number'] = isset($data['reserve_number']) ? $data['reserve_number'] : null;
        $this->container['for_new_clients_number'] = isset($data['for_new_clients_number']) ? $data['for_new_clients_number'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets uid
     * @return int
     */
    public function getUid()
    {
        return $this->container['uid'];
    }

    /**
     * Sets uid
     * @param int $uid id сотрудника
     * @return $this
     */
    public function setUid($uid)
    {
        $this->container['uid'] = $uid;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Имя
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email Email
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets phone
     * @return int
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     * @param int $phone Номер мобильного
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets amoid
     * @return int
     */
    public function getAmoid()
    {
        return $this->container['amoid'];
    }

    /**
     * Sets amoid
     * @param int $amoid id пользователя amoCRM
     * @return $this
     */
    public function setAmoid($amoid)
    {
        $this->container['amoid'] = $amoid;

        return $this;
    }

    /**
     * Gets enabled
     * @return int
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     * @param int $enabled Статус активности сотрудника вкл/выкл
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets sender_name
     * @return string
     */
    public function getSenderName()
    {
        return $this->container['sender_name'];
    }

    /**
     * Sets sender_name
     * @param string $sender_name Имя отправителя
     * @return $this
     */
    public function setSenderName($sender_name)
    {
        $this->container['sender_name'] = $sender_name;

        return $this;
    }

    /**
     * Gets signature
     * @return string
     */
    public function getSignature()
    {
        return $this->container['signature'];
    }

    /**
     * Sets signature
     * @param string $signature Подпись для писем
     * @return $this
     */
    public function setSignature($signature)
    {
        $this->container['signature'] = $signature;

        return $this;
    }

    /**
     * Gets pbx_number
     * @return int
     */
    public function getPbxNumber()
    {
        return $this->container['pbx_number'];
    }

    /**
     * Sets pbx_number
     * @param int $pbx_number Номер назначения в OnlinePBX
     * @return $this
     */
    public function setPbxNumber($pbx_number)
    {
        $this->container['pbx_number'] = $pbx_number;

        return $this;
    }

    /**
     * Gets reserve_number
     * @return int
     */
    public function getReserveNumber()
    {
        return $this->container['reserve_number'];
    }

    /**
     * Sets reserve_number
     * @param int $reserve_number Номер для звонков вне рабочее время
     * @return $this
     */
    public function setReserveNumber($reserve_number)
    {
        $this->container['reserve_number'] = $reserve_number;

        return $this;
    }

    /**
     * Gets for_new_clients_number
     * @return int
     */
    public function getForNewClientsNumber()
    {
        return $this->container['for_new_clients_number'];
    }

    /**
     * Sets for_new_clients_number
     * @param int $for_new_clients_number Номер для звонков по новым клиентам
     * @return $this
     */
    public function setForNewClientsNumber($for_new_clients_number)
    {
        $this->container['for_new_clients_number'] = $for_new_clients_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Introvert\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Introvert\ObjectSerializer::sanitizeForSerialization($this));
    }
}



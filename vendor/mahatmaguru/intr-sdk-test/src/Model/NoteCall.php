<?php
/**
 * NoteCall
 *
 * PHP version 5
 *
 * @category Class
 * @package  Introvert
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * INTROVERT API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Introvert\Model;

use \ArrayAccess;

/**
 * NoteCall Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Introvert
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class NoteCall implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'NoteCall';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'uniq' => 'string',
        'id_widget' => 'string',
        'phone' => 'string',
        'duration' => 'int',
        'link' => 'string',
        'from' => 'int',
        'status' => 'int',
        'element_id' => 'int',
        'element_type' => 'int',
        'note_type' => 'int',
        'date_create' => 'string',
        'crm_user_id' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'uniq' => 'uniq',
        'id_widget' => 'id_widget',
        'phone' => 'phone',
        'duration' => 'duration',
        'link' => 'link',
        'from' => 'from',
        'status' => 'status',
        'element_id' => 'element_id',
        'element_type' => 'element_type',
        'note_type' => 'note_type',
        'date_create' => 'date_create',
        'crm_user_id' => 'crm_user_id'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'uniq' => 'setUniq',
        'id_widget' => 'setIdWidget',
        'phone' => 'setPhone',
        'duration' => 'setDuration',
        'link' => 'setLink',
        'from' => 'setFrom',
        'status' => 'setStatus',
        'element_id' => 'setElementId',
        'element_type' => 'setElementType',
        'note_type' => 'setNoteType',
        'date_create' => 'setDateCreate',
        'crm_user_id' => 'setCrmUserId'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'uniq' => 'getUniq',
        'id_widget' => 'getIdWidget',
        'phone' => 'getPhone',
        'duration' => 'getDuration',
        'link' => 'getLink',
        'from' => 'getFrom',
        'status' => 'getStatus',
        'element_id' => 'getElementId',
        'element_type' => 'getElementType',
        'note_type' => 'getNoteType',
        'date_create' => 'getDateCreate',
        'crm_user_id' => 'getCrmUserId'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['uniq'] = isset($data['uniq']) ? $data['uniq'] : null;
        $this->container['id_widget'] = isset($data['id_widget']) ? $data['id_widget'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['link'] = isset($data['link']) ? $data['link'] : null;
        $this->container['from'] = isset($data['from']) ? $data['from'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['element_id'] = isset($data['element_id']) ? $data['element_id'] : null;
        $this->container['element_type'] = isset($data['element_type']) ? $data['element_type'] : 2;
        $this->container['note_type'] = isset($data['note_type']) ? $data['note_type'] : null;
        $this->container['date_create'] = isset($data['date_create']) ? $data['date_create'] : null;
        $this->container['crm_user_id'] = isset($data['crm_user_id']) ? $data['crm_user_id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['uniq'] === null) {
            $invalid_properties[] = "'uniq' can't be null";
        }
        if ($this->container['id_widget'] === null) {
            $invalid_properties[] = "'id_widget' can't be null";
        }
        if ($this->container['phone'] === null) {
            $invalid_properties[] = "'phone' can't be null";
        }
        if ($this->container['duration'] === null) {
            $invalid_properties[] = "'duration' can't be null";
        }
        if ($this->container['link'] === null) {
            $invalid_properties[] = "'link' can't be null";
        }
        if ($this->container['from'] === null) {
            $invalid_properties[] = "'from' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalid_properties[] = "'status' can't be null";
        }
        if ($this->container['element_id'] === null) {
            $invalid_properties[] = "'element_id' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['uniq'] === null) {
            return false;
        }
        if ($this->container['id_widget'] === null) {
            return false;
        }
        if ($this->container['phone'] === null) {
            return false;
        }
        if ($this->container['duration'] === null) {
            return false;
        }
        if ($this->container['link'] === null) {
            return false;
        }
        if ($this->container['from'] === null) {
            return false;
        }
        if ($this->container['status'] === null) {
            return false;
        }
        if ($this->container['element_id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets uniq
     * @return string
     */
    public function getUniq()
    {
        return $this->container['uniq'];
    }

    /**
     * Sets uniq
     * @param string $uniq Уникальный идентификатор звонка
     * @return $this
     */
    public function setUniq($uniq)
    {
        $this->container['uniq'] = $uniq;

        return $this;
    }

    /**
     * Gets id_widget
     * @return string
     */
    public function getIdWidget()
    {
        return $this->container['id_widget'];
    }

    /**
     * Sets id_widget
     * @param string $id_widget Идентификатор виджета телефонии
     * @return $this
     */
    public function setIdWidget($id_widget)
    {
        $this->container['id_widget'] = $id_widget;

        return $this;
    }

    /**
     * Gets phone
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     * @param string $phone Номер телефона
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets duration
     * @return int
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     * @param int $duration Длительность в секундах
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets link
     * @return string
     */
    public function getLink()
    {
        return $this->container['link'];
    }

    /**
     * Sets link
     * @param string $link Прямая ссылка на запись звонка
     * @return $this
     */
    public function setLink($link)
    {
        $this->container['link'] = $link;

        return $this;
    }

    /**
     * Gets from
     * @return int
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     * @param int $from Добавочный номер
     * @return $this
     */
    public function setFrom($from)
    {
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets status
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param int $status Статус звонка       * 1 - Оставил голосовое сообщение       * 2 - Перезвонить позже       * 3 - Нет на месте       * 4 - Разговор состоялся       * 5 - Неверный номер       * 6 - Не дозвонился       * 7 - Номер занят
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets element_id
     * @return int
     */
    public function getElementId()
    {
        return $this->container['element_id'];
    }

    /**
     * Sets element_id
     * @param int $element_id 
     * @return $this
     */
    public function setElementId($element_id)
    {
        $this->container['element_id'] = $element_id;

        return $this;
    }

    /**
     * Gets element_type
     * @return int
     */
    public function getElementType()
    {
        return $this->container['element_type'];
    }

    /**
     * Sets element_type
     * @param int $element_type 2 (lead), 1 (contact). По умолчанию 2 (lead)
     * @return $this
     */
    public function setElementType($element_type)
    {
        $this->container['element_type'] = $element_type;

        return $this;
    }

    /**
     * Gets note_type
     * @return int
     */
    public function getNoteType()
    {
        return $this->container['note_type'];
    }

    /**
     * Sets note_type
     * @param int $note_type тип звонка, 10 - Входящий звонок, 11 - Исходящий звонок. По умолчанию 10
     * @return $this
     */
    public function setNoteType($note_type)
    {
        $this->container['note_type'] = $note_type;

        return $this;
    }

    /**
     * Gets date_create
     * @return string
     */
    public function getDateCreate()
    {
        return $this->container['date_create'];
    }

    /**
     * Sets date_create
     * @param string $date_create 
     * @return $this
     */
    public function setDateCreate($date_create)
    {
        $this->container['date_create'] = $date_create;

        return $this;
    }

    /**
     * Gets crm_user_id
     * @return int
     */
    public function getCrmUserId()
    {
        return $this->container['crm_user_id'];
    }

    /**
     * Sets crm_user_id
     * @param int $crm_user_id id ответственного за звонок
     * @return $this
     */
    public function setCrmUserId($crm_user_id)
    {
        $this->container['crm_user_id'] = $crm_user_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Introvert\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Introvert\ObjectSerializer::sanitizeForSerialization($this));
    }
}



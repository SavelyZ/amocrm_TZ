<?php
/**
 * Links
 *
 * PHP version 5
 *
 * @category Class
 * @package  Introvert
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * INTROVERT API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Introvert\Model;

use \ArrayAccess;

/**
 * Links Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Introvert
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Links implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Links';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'from' => 'string',
        'from_id' => 'int',
        'to' => 'string',
        'to_id' => 'int',
        'from_catalog_id' => 'int',
        'to_catalog_id' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'from' => 'from',
        'from_id' => 'from_id',
        'to' => 'to',
        'to_id' => 'to_id',
        'from_catalog_id' => 'from_catalog_id',
        'to_catalog_id' => 'to_catalog_id'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'from' => 'setFrom',
        'from_id' => 'setFromId',
        'to' => 'setTo',
        'to_id' => 'setToId',
        'from_catalog_id' => 'setFromCatalogId',
        'to_catalog_id' => 'setToCatalogId'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'from' => 'getFrom',
        'from_id' => 'getFromId',
        'to' => 'getTo',
        'to_id' => 'getToId',
        'from_catalog_id' => 'getFromCatalogId',
        'to_catalog_id' => 'getToCatalogId'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['from'] = isset($data['from']) ? $data['from'] : null;
        $this->container['from_id'] = isset($data['from_id']) ? $data['from_id'] : null;
        $this->container['to'] = isset($data['to']) ? $data['to'] : null;
        $this->container['to_id'] = isset($data['to_id']) ? $data['to_id'] : null;
        $this->container['from_catalog_id'] = isset($data['from_catalog_id']) ? $data['from_catalog_id'] : null;
        $this->container['to_catalog_id'] = isset($data['to_catalog_id']) ? $data['to_catalog_id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['from'] === null) {
            $invalid_properties[] = "'from' can't be null";
        }
        if ($this->container['from_id'] === null) {
            $invalid_properties[] = "'from_id' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['from'] === null) {
            return false;
        }
        if ($this->container['from_id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets from
     * @return string
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     * @param string $from Сущность у которой необходимо получить связи (leads, contacts, companies, customers, catalog_elements)
     * @return $this
     */
    public function setFrom($from)
    {
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets from_id
     * @return int
     */
    public function getFromId()
    {
        return $this->container['from_id'];
    }

    /**
     * Sets from_id
     * @param int $from_id ID элемента сущности (можно передавать массив с ID)
     * @return $this
     */
    public function setFromId($from_id)
    {
        $this->container['from_id'] = $from_id;

        return $this;
    }

    /**
     * Gets to
     * @return string
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     * @param string $to Сущность, которая привязана (leads, contacts, companies, customers, catalog_elements)
     * @return $this
     */
    public function setTo($to)
    {
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets to_id
     * @return int
     */
    public function getToId()
    {
        return $this->container['to_id'];
    }

    /**
     * Sets to_id
     * @param int $to_id ID элемента сущности которая привязана (можно передавать массив с ID)
     * @return $this
     */
    public function setToId($to_id)
    {
        $this->container['to_id'] = $to_id;

        return $this;
    }

    /**
     * Gets from_catalog_id
     * @return int
     */
    public function getFromCatalogId()
    {
        return $this->container['from_catalog_id'];
    }

    /**
     * Sets from_catalog_id
     * @param int $from_catalog_id ID каталога, связи с которым необходимо получить (Обязательно для заполнения если from='catalog_elements')
     * @return $this
     */
    public function setFromCatalogId($from_catalog_id)
    {
        $this->container['from_catalog_id'] = $from_catalog_id;

        return $this;
    }

    /**
     * Gets to_catalog_id
     * @return int
     */
    public function getToCatalogId()
    {
        return $this->container['to_catalog_id'];
    }

    /**
     * Sets to_catalog_id
     * @param int $to_catalog_id ID каталога, элементы которого привязаны к сущности (Обязательно для заполнения если to='catalog_elements')
     * @return $this
     */
    public function setToCatalogId($to_catalog_id)
    {
        $this->container['to_catalog_id'] = $to_catalog_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Introvert\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Introvert\ObjectSerializer::sanitizeForSerialization($this));
    }
}



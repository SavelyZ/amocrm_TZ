<?php
/**
 * LinksApi
 * PHP version 5
 *
 * @category Class
 * @package  Introvert
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * INTROVERT API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Introvert\Api;

use \Introvert\ApiClient;
use \Introvert\ApiException;
use \Introvert\Configuration;
use \Introvert\ObjectSerializer;

/**
 * LinksApi Class Doc Comment
 *
 * @category Class
 * @package  Introvert
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LinksApi
{
    /**
     * API Client
     *
     * @var \Introvert\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Introvert\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Introvert\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://test.api.yadrocrm.ru/tmp');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Introvert\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Introvert\ApiClient $apiClient set the API client
     *
     * @return LinksApi
     */
    public function setApiClient(\Introvert\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getAll
     *
     * Метод для получения связей между сущностями аккаунта
     *
     * @param \Introvert\Model\Links[] | array $body Массив объектов запрашиваемых ссылок (optional)
     * @throws \Introvert\ApiException on non-2xx response
     * @return object | array
     */
    public function getAll($body = null)
    {
        list($response) = $this->getAllWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation getAllWithHttpInfo
     *
     * Метод для получения связей между сущностями аккаунта
     *
     * @param \Introvert\Model\Links[] | array $body Массив объектов запрашиваемых ссылок (optional)
     * @throws \Introvert\ApiException on non-2xx response
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/crm/links/list";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('key');
        if (strlen($apiKey) !== 0) {
            $queryParams['key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/crm/links/list'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLinks
     *
     * Метод для получения связей между сущностями аккаунта
     *
     * @param string $from Сущность у которой необходимо получить связи (leads, contacts, companies, customers, catalog_elements) (required)
     * @param int[] $from_id ID элемента сущности (можно передавать массив с ID) (required)
     * @param string $to Сущность, которая привязана (leads, contacts, companies, customers, catalog_elements) (optional)
     * @param int[] $to_id ID элемента сущности которая привязана (можно передавать массив с ID) (optional)
     * @param string $from_catalog_id ID каталога, связи с которым необходимо получить (Обязательно для заполнения если from&#x3D;&#39;catalog_elements&#39;) (optional)
     * @param string $to_catalog_id ID каталога, элементы которого привязаны к сущности (Обязательно для заполнения если to&#x3D;&#39;catalog_elements&#39;) (optional)
     * @throws \Introvert\ApiException on non-2xx response
     * @return object | array
     */
    public function getLinks($from, $from_id, $to = null, $to_id = null, $from_catalog_id = null, $to_catalog_id = null)
    {
        list($response) = $this->getLinksWithHttpInfo($from, $from_id, $to, $to_id, $from_catalog_id, $to_catalog_id);
        return $response;
    }

    /**
     * Operation getLinksWithHttpInfo
     *
     * Метод для получения связей между сущностями аккаунта
     *
     * @param string $from Сущность у которой необходимо получить связи (leads, contacts, companies, customers, catalog_elements) (required)
     * @param int[] $from_id ID элемента сущности (можно передавать массив с ID) (required)
     * @param string $to Сущность, которая привязана (leads, contacts, companies, customers, catalog_elements) (optional)
     * @param int[] $to_id ID элемента сущности которая привязана (можно передавать массив с ID) (optional)
     * @param string $from_catalog_id ID каталога, связи с которым необходимо получить (Обязательно для заполнения если from&#x3D;&#39;catalog_elements&#39;) (optional)
     * @param string $to_catalog_id ID каталога, элементы которого привязаны к сущности (Обязательно для заполнения если to&#x3D;&#39;catalog_elements&#39;) (optional)
     * @throws \Introvert\ApiException on non-2xx response
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLinksWithHttpInfo($from, $from_id, $to = null, $to_id = null, $from_catalog_id = null, $to_catalog_id = null)
    {
        // verify the required parameter 'from' is set
        if ($from === null) {
            throw new \InvalidArgumentException('Missing the required parameter $from when calling getLinks');
        }
        // verify the required parameter 'from_id' is set
        if ($from_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $from_id when calling getLinks');
        }
        // parse inputs
        $resourcePath = "/crm/links/getLinks";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($from !== null) {
            $queryParams['from'] = $this->apiClient->getSerializer()->toQueryValue($from);
        }

        // query params
        if ($from_id !== null) {
            $queryParams['from_id'] = $from_id; //$this->apiClient->getSerializer()->serializeCollection($from_id, 'multi', true);
        }

        // query params
        if ($to !== null) {
            $queryParams['to'] = $this->apiClient->getSerializer()->toQueryValue($to);
        }

        // query params
        if ($to_id !== null) {
            $queryParams['to_id'] = $to_id; //$this->apiClient->getSerializer()->serializeCollection($to_id, 'multi', true);
        }

        // query params
        if ($from_catalog_id !== null) {
            $queryParams['from_catalog_id'] = $this->apiClient->getSerializer()->toQueryValue($from_catalog_id);
        }

        // query params
        if ($to_catalog_id !== null) {
            $queryParams['to_catalog_id'] = $this->apiClient->getSerializer()->toQueryValue($to_catalog_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('key');
        if (strlen($apiKey) !== 0) {
            $queryParams['key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/crm/links/getLinks'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}

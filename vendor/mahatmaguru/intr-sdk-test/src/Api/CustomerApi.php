<?php
/**
 * CustomerApi
 * PHP version 5
 *
 * @category Class
 * @package  Introvert
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * INTROVERT API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Introvert\Api;

use \Introvert\ApiClient;
use \Introvert\ApiException;
use \Introvert\Configuration;
use \Introvert\ObjectSerializer;

/**
 * CustomerApi Class Doc Comment
 *
 * @category Class
 * @package  Introvert
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerApi
{
    /**
     * API Client
     *
     * @var \Introvert\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Introvert\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Introvert\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://test.api.yadrocrm.ru/tmp');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Introvert\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Introvert\ApiClient $apiClient set the API client
     *
     * @return CustomerApi
     */
    public function setApiClient(\Introvert\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation create
     *
     * Создает покупателей
     *
     * @param \Introvert\Model\Customer[] | array $body Массив объектов создаваемых покупателей (optional)
     * @throws \Introvert\ApiException on non-2xx response
     * @return object | array
     */
    public function create($body = null)
    {
        list($response) = $this->createWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createWithHttpInfo
     *
     * Создает покупателей
     *
     * @param \Introvert\Model\Customer[] | array $body Массив объектов создаваемых покупателей (optional)
     * @throws \Introvert\ApiException on non-2xx response
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function createWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/crm/customer/create";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('key');
        if (strlen($apiKey) !== 0) {
            $queryParams['key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/crm/customer/create'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAll
     *
     * Возвращает список покупателей
     *
     * @param int[] $crm_user_id фильтр по id ответственного (optional)
     * @param int[] $id фильтр по id (optional)
     * @param string $date_type Выбрать элемент по дате создания или редактирования. Тип даты: create или modify (optional)
     * @param string $date_from Дата с которой нужно начинать выборку. В формате ММ/ЧЧ/ГГГГ (optional)
     * @param string $date_to Дата до которой нужно выбирать. В формате ММ/ЧЧ/ГГГГ (optional)
     * @param string[] $tasks Выбрать элемент по задачам (optional)
     * @param string $next_date_from Выбрать элемент по дате след. покупки начиная с данной даты. В формате ММ/ЧЧ/ГГГГ (optional)
     * @param string $next_date_to Выбрать элемент по дате след. покупки до данной даты. В формате ММ/ЧЧ/ГГГГ (optional)
     * @param string $cf Выбрать элемент по доп. полю [{fieldId: fieldValue}]      *    Для некоторых типов полей нужно передавать добпонительыне параметры      *      *    Дата и день рождения:      *    /from - Дата с которой нужно начинать выборку. В формате ММ/ЧЧ/ГГГГ      *    /to -Дата до которой нужно выбирать. В формате ММ/ЧЧ/ГГГГ      *      *    Мультисписок:      *    нужно передавать массив с параметрами поиска      *      *    Флаг:      *    В качестве значений принимает только &#39;Y&#39; и &#39;N&#39; (optional)
     * @param int $count Количество запрашиваемых элементов (optional)
     * @param int $offset смещение, относительно которого нужно вернуть элементы (optional)
     * @throws \Introvert\ApiException on non-2xx response
     * @return object | array
     */
    public function getAll($crm_user_id = null, $id = null, $date_type = null, $date_from = null, $date_to = null, $tasks = null, $next_date_from = null, $next_date_to = null, $cf = null, $count = null, $offset = null)
    {
        list($response) = $this->getAllWithHttpInfo($crm_user_id, $id, $date_type, $date_from, $date_to, $tasks, $next_date_from, $next_date_to, $cf, $count, $offset);
        return $response;
    }

    /**
     * Operation getAllWithHttpInfo
     *
     * Возвращает список покупателей
     *
     * @param int[] $crm_user_id фильтр по id ответственного (optional)
     * @param int[] $id фильтр по id (optional)
     * @param string $date_type Выбрать элемент по дате создания или редактирования. Тип даты: create или modify (optional)
     * @param string $date_from Дата с которой нужно начинать выборку. В формате ММ/ЧЧ/ГГГГ (optional)
     * @param string $date_to Дата до которой нужно выбирать. В формате ММ/ЧЧ/ГГГГ (optional)
     * @param string[] $tasks Выбрать элемент по задачам (optional)
     * @param string $next_date_from Выбрать элемент по дате след. покупки начиная с данной даты. В формате ММ/ЧЧ/ГГГГ (optional)
     * @param string $next_date_to Выбрать элемент по дате след. покупки до данной даты. В формате ММ/ЧЧ/ГГГГ (optional)
     * @param string $cf Выбрать элемент по доп. полю [{fieldId: fieldValue}]      *    Для некоторых типов полей нужно передавать добпонительыне параметры      *      *    Дата и день рождения:      *    /from - Дата с которой нужно начинать выборку. В формате ММ/ЧЧ/ГГГГ      *    /to -Дата до которой нужно выбирать. В формате ММ/ЧЧ/ГГГГ      *      *    Мультисписок:      *    нужно передавать массив с параметрами поиска      *      *    Флаг:      *    В качестве значений принимает только &#39;Y&#39; и &#39;N&#39; (optional)
     * @param int $count Количество запрашиваемых элементов (optional)
     * @param int $offset смещение, относительно которого нужно вернуть элементы (optional)
     * @throws \Introvert\ApiException on non-2xx response
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllWithHttpInfo($crm_user_id = null, $id = null, $date_type = null, $date_from = null, $date_to = null, $tasks = null, $next_date_from = null, $next_date_to = null, $cf = null, $count = null, $offset = null)
    {
        // parse inputs
        $resourcePath = "/crm/customer/list";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($crm_user_id !== null) {
            $queryParams['crm_user_id'] = $crm_user_id; //$this->apiClient->getSerializer()->serializeCollection($crm_user_id, 'multi', true);
        }

        // query params
        if ($id !== null) {
            $queryParams['id'] = $id; //$this->apiClient->getSerializer()->serializeCollection($id, 'multi', true);
        }

        // query params
        if ($date_type !== null) {
            $queryParams['date[type]'] = $this->apiClient->getSerializer()->toQueryValue($date_type);
        }

        // query params
        if ($date_from !== null) {
            $queryParams['date[from]'] = $this->apiClient->getSerializer()->toQueryValue($date_from);
        }

        // query params
        if ($date_to !== null) {
            $queryParams['date[to]'] = $this->apiClient->getSerializer()->toQueryValue($date_to);
        }

        // query params
        if ($tasks !== null) {
            $queryParams['tasks'] = $tasks; //$this->apiClient->getSerializer()->serializeCollection($tasks, 'multi', true);
        }

        // query params
        if ($next_date_from !== null) {
            $queryParams['next_date[from]'] = $this->apiClient->getSerializer()->toQueryValue($next_date_from);
        }

        // query params
        if ($next_date_to !== null) {
            $queryParams['next_date[to]'] = $this->apiClient->getSerializer()->toQueryValue($next_date_to);
        }

        // query params
        if ($cf !== null) {
            $queryParams['cf'] = $this->apiClient->getSerializer()->toQueryValue($cf);
        }

        // query params
        if ($count !== null) {
            $queryParams['count'] = $this->apiClient->getSerializer()->toQueryValue($count);
        }

        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('key');
        if (strlen($apiKey) !== 0) {
            $queryParams['key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/crm/customer/list'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation update
     *
     * Обновляет покупателей
     *
     * @param \Introvert\Model\Customer[] | array $body Массив объектов обновляемых покупателей (optional)
     * @throws \Introvert\ApiException on non-2xx response
     * @return object | array
     */
    public function update($body = null)
    {
        list($response) = $this->updateWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateWithHttpInfo
     *
     * Обновляет покупателей
     *
     * @param \Introvert\Model\Customer[] | array $body Массив объектов обновляемых покупателей (optional)
     * @throws \Introvert\ApiException on non-2xx response
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/crm/customer/update";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('key');
        if (strlen($apiKey) !== 0) {
            $queryParams['key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/crm/customer/update'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
